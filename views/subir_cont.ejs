<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>
        <%= title%>
    </title>
    <link id="template-file" href="templates/template.ejs" rel="import" />

    <link href="css/font.css" rel='stylesheet' media="screen">

    <link rel="icon" type="image/png" href="images/icono.png" />
<script src="js/html-imports.min.js"></script>

    <style>
        [class*="foundicon-"] {
            font-family: GeneralFoundicons;
            font-style: normal;
        }
    </style>
</head>

<body>
    <script>

  document.addEventListener( 'HTMLImportsLoaded', function () 
    {
        var link = document.querySelector('#template-file');
        var template = link.import.querySelector('#template');
    document.body.appendChild(document.importNode(template, true));  



    } )

  </script>
    <div class="col-sm-12 col-md-12 main">
        <h1 class="page-header" id="page-header">Subir al Servidor</h1>
    </div>
    <div class='class="col-sm-12 col-md-12'>
        <div class='span12 col-md-12 columns twelve large-12'>
            <h2>Ingresar los datos para el Contenido</h2>
            <p>La estructura es generada por el json de configuraci√≥n.</p>
            <form action="/upload" method='POST' id='subir' name="subir" enctype='multipart/form-data'>
                <div id='editor'> </div>
                <div class="row">

                    <div class="col-md-4 col-md-offset-1 col-sm-4 col-sm-offset-1 col-xs-4 col-xs-offset-1 col-lg-4 col-lg-offset-1">

                        <button class='btn btn-primary col-md-12 col-sm-12 col-xs-12' id='cancelar' type="button">Cancelar</button>

                    </div>
                    <div class="col-md-4 col-md-offset-1 col-sm-4 col-sm-offset-1 col-xs-4 col-xs-offset-1 col-lg-4 col-lg-offset-1">

                        <button class='btn btn-primary col-md-12 col-sm-12 col-xs-12' id='enviar' type="button">Subir</button>

                    </div>


                </div>
                <br>
            </form>
            <form action="/upload" method='POST' id='subir2' name="subir2">
                <input id='output2' type='hidden' name='output2' style='width: 100%; height: 450px; font-family: monospace;' class='form-control'></input>
                <input id='outputbefore' type='hidden' name='outputbefore' style='width: 100%; height: 450px; font-family: monospace;' class='form-control'></input>
                <input id='IDescena' type='hidden' name='IDescena' class='form-control'></input>
            </form>

            <div id='div_barra' tabindex='1' style="display :none">
                <h5 id="name_file"></h5>
                <div class="progress progress-striped active">


                    <div id='barra' class="progress-bar" role="progressbar" aria-valuenow="45" aria-valuemin="0" aria-valuemax="100" style="width: 0%">
                        <span id='avance' class="sr-only"></span>
                    </div>
                </div>
            </div>
        </div>
        <div class='span12 col-md-12 columns twelve large-12'>

            <h2>JSON Generado</h2>
            <p><button class='btn btn-primary' id='setvalue'>Actualizar Json Generado</button></p>
            <textarea id='output' style='width: 100%; height: 300px; font-family: monospace;' class='form-control'></textarea>


            <h2>Validation</h2>
            <p>This will update whenever the form changes to show validation errors if there are any.</p>
            <textarea id='validate' style='width: 100%; height: 150px; font-family: monospace;' readonly disabled class='form-control'></textarea>
        </div>

    </div>
    <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>

    <script src='js/jsoneditor.js'></script>
    <script src='js/LZString.js'></script>
    <script src="https://www.gstatic.com/firebasejs/4.0.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/4.0.0/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/4.0.0/firebase-storage.js"></script>
    <script src="https://www.gstatic.com/firebasejs/4.2.0/firebase.js"></script>
    <script>
        (function() {
            firebase.initializeApp(<%- JSON.stringify(firebaseConfig, null, 2) %>);



            var upload;
            var index = 0;
            // reference to the root of the storage bucket
            var storageRef = firebase.storage().ref();

            $("#pause-upload").click(function(e) {
                upload.pause();
            });

            $("#resume-upload").click(function(e) {
                upload.resume();
            });

            function deletefiles(names, z) {

                var desertRef = storageRef.child(names[z]);

                // Delete the file
                desertRef.delete().then(function() {
                    if (names.length < (z + 1)) {
                        deletefiles(names, z + 1)

                    } else {
                        document.subir2.submit();
                    }
                }).catch(function(error) {
                    alert("errro al borra el archivo :" + name + "  causa :" + error)
                    if (names.length < (z + 1)) {
                        deletefiles(names, z + 1)

                    } else {
                        document.subir2.submit();
                    }
                    // Uh-oh, an error occurred!
                });

            }

            function filesDeletes(str, after) {
                var myRe = /\bhttps:\/\/[^"\s]+/;
                var myArray = str.match(myRe);
                var listUrls = []
                var listUrlsre = []
                while (myArray != null && myArray[0].localeCompare("") != 0) {
                    listUrls.push(myArray[0])
                    str = str.replace(myArray, "")
                    myArray = str.match(myRe);
                }
               // alert(listUrls)
                for (var i = 0; i < listUrls.length; i++) {
                    if (!after.includes(listUrls[i])) {
                        var myRe2 = /\bo\/[^?]+/;
                        var name = listUrls[i].match(myRe2);
                        listUrlsre.push(name[0].replace("o/", ""))
                    }
                }
                return listUrlsre;
            }

            function veificaNull() {


                if ($("input:file").length == index) {
                    $('#div_barra').hide();
                    var $schemabefore = document.getElementById('outputbefore');
                    var $schemaafter = document.getElementById('output2');

                    var fls = filesDeletes($schemabefore.value, $schemaafter.value)

                    
                    if (fls != null && fls.length > 0) {
                        deletefiles(fls, 0);
                    } else {
                        document.subir2.submit();
                    }


                }
                if ($("input:file").length > index) {
                    var file = $("input:file")[index].files[0];
                    if (file != null) {
                        $('#name_file').html("Subiendo archivo: " + file.name);
                        $('#div_barra').show();
                        $("#div_barra").focus();
                        uploaded(file);
                    } else {
                        index = index + 1
                        veificaNull()
                    }
                }

            }

            function uploaded(file) {
                var metadata = {
                    contentType: file.type // just go with whatever content type the browser thinks the file is
                };

                // if there was already an upload in progress, just cancel it
                if (upload) {
                    upload.cancel();
                }

                upload = storageRef.child($.now() + file.name).put(file, metadata);

                console.log(upload);

                // Listen for state changes, errors, and completion of the upload.
                upload.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'
                    function(snapshot) {
                        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
                        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        $('#barra').css('width', progress + '%');

                        $('#avance').html(progress + '%')
                        if (progress >= 100) {
                            $('#barra').css('width', 0 + '%');
                            $('#name_file').html("Archivo Subido: " + file.name);
                        }
                        // console.log('Upload is ' + progress + '% done');
                        switch (snapshot.state) {
                            case firebase.storage.TaskState.PAUSED: // or 'paused'
                                console.log('Upload is paused');
                                break;
                            case firebase.storage.TaskState.RUNNING: // or 'running'
                                //  console.log('Upload is running');
                                break;
                        }
                    },
                    function(error) {

                        console.error('upload error', error);

                        // A full list of error codes is available at
                        // https://firebase.google.com/docs/storage/web/handle-errors
                        switch (error.code) {
                            case 'storage/unauthorized':
                                // User doesn't have permission to access the object
                                alert('al parecer no tienes permiso para subir archivos')
                                // console.error('upload error', 'User doesnt have permission to access the object');
                                break;

                            case 'storage/canceled':
                                // User canceled the upload
                                alert('cancelo la subida de archivos, no se almaceno la pelicula a subir')
                                break;

                                // ...

                            case 'storage/unknown':
                                // Unknown error occurred, inspect error.serverResponse
                                break;
                            default:
                                alert('ha ocurrido un error intentaremos subir de nuevo su archivo')
                                uploaded(file)
                                break;

                        }
                    },
                    function() {
                        // Upload completed successfully, now we can get the download URL
                        index = index + 1;


                        var downloadURL = upload.snapshot.downloadURL;
                        var $schema3 = document.getElementById('output2');
                        $schema3.value = $schema3.value.replace('"'+file.name+'"', '"'+downloadURL+'"');
                        console.log('upload complete, download url is', downloadURL)
                        veificaNull()
                    });
            };
            var schema;
            schema = JSON.parse(LZString.decompressFromBase64('<%= json%>'));
            var escena = {};
            var json_back = '';
            escena = LZString.decompressFromBase64('<%= escenas%>');
            //if()
            //alert(LZString.decompressFromBase64('<%= escenas%>'))
            JSONEditor.defaults.options.form_name_root = false;
            // Divs/textareas on the page
            var $output = document.getElementById('output');
            var $outputbefor = document.getElementById('outputbefore');
            var $editor = document.getElementById('editor');
            var $validate = document.getElementById('validate');
            var estadoEscena = false;
            // Buttons

            var $set_value_button = document.getElementById('setvalue');

            var jsoneditor;


            var reload = function(keep_value) {
                var startval = (jsoneditor && keep_value) ? jsoneditor.getValue() : window.startval;
                window.startval = undefined;

                if (jsoneditor) jsoneditor.destroy();
                jsoneditor = new JSONEditor($editor, {
                    schema: schema,
                    startval: startval
                });
                window.jsoneditor = jsoneditor;

                // When the value of the editor changes, update the JSON output and validation message
                jsoneditor.on('change', function() {
                    var json = jsoneditor.getValue();
                    //alert("json: "+json.ID);
                    //alert("escena: "+ escena);
                    var id = Math.round($.now() * Math.random() / 100000);
                    //  alert(JSON.stringify(json_back))
                    json = json_recarga(json)
                    if (escena != null) {
                        if (escena.localeCompare('') == 0) {
                            //alert("a"); 
                            if (estadoEscena == false) {
                                estadoEscena = true;
                                json.ID = id;
                                $output.value = JSON.stringify(json, null, 2);
                             
                            } else {
                                $output.value = JSON.stringify(json, null, 2);
                           

                            }

                        } else {
                            if (estadoEscena == false) {
                                //alert("b");   
                                estadoEscena = true;
                                $output.value = escena;
                                $outputbefor.value = escena;
                             
                            } else {
                                //alert("c"); 
                                $output.value = JSON.stringify(json, null, 2);
                             
                            }

                        }

                    } else {
                        //alert("ovejuno"); 
                        if (estadoEscena == false) {
                            //alert("d"); 
                            estadoEscena = true;
                            json.ID = id;
                            $output.value = JSON.stringify(json, null, 2);
                         
                        } else {


                            $output.value = JSON.stringify(json, null, 2);
                           

                        }

                    }

                    jsoneditor.setValue(JSON.parse($output.value));
                    var validation_errors = jsoneditor.validate();
                    // Show validation errors if there are any
                    if (validation_errors.length) {
                        $validate.value = JSON.stringify(validation_errors, null, 2);
                    } else {
                        $validate.value = 'valid';
                    }

                });
            };
            var rename = function() {
                var header = document.getElementById('editor');
                var rs = header.getElementsByClassName('row');
                for (var i = 0; i < rs.length; i++) {
                    var inputs = rs[i].getElementsByTagName('input');
                    for (var j = 0; j < inputs.length; j++) {
                        inputs[j].name = inputs[j].name.replace('root[', "")
                        inputs[j].name = inputs[j].name.replace(/\[/g, "__");
                        inputs[j].name = inputs[j].name.replace(/]/g, "");
                    }
                }

            };
            var json_recarga = function(js) {
    
                 

                        for (var i = 0; i < js.Contenido_Trasmedia.Imagenes.length; i++) {
                            if (js.Contenido_Trasmedia.Imagenes[i].Name_Imagen.localeCompare('') == 0 && js.Contenido_Trasmedia.Imagenes[i].Imagen.localeCompare('') != 0) {
                                var myRe2 = /\bo\/[^?]+/;
                                var name = js.Contenido_Trasmedia.Imagenes[i].Imagen.match(myRe2);

                                if (name != null && name.length != 0) {
                                    js.Contenido_Trasmedia.Imagenes[i].Name_Imagen = $.now()+name[0].replace("o/", "").toLowerCase()
                                } else {
                                    js.Contenido_Trasmedia.Imagenes[i].Name_Imagen = $.now()+js.Contenido_Trasmedia.Imagenes[i].Imagen.toLowerCase()
                                }

                            }
                        }
                     for (var i = 0; i < js.Contenido_Trasmedia.Videos.length; i++) {
                            if (js.Contenido_Trasmedia.Videos[i].Name_Video.localeCompare('') == 0 && js.Contenido_Trasmedia.Videos[i].Video.localeCompare('') != 0) {
                                var myRe2 = /\bo\/[^?]+/;
                                var name = js.Contenido_Trasmedia.Videos[i].Video.match(myRe2);
                                if (name != null && name.length != 0) {
                                    js.Contenido_Trasmedia.Videos[i].Name_Video = $.now()+name[0].replace("o/", "").toLowerCase()
                                } else {
                                    js.Contenido_Trasmedia.Videos[i].Name_Video = $.now()+js.Contenido_Trasmedia.Videos[i].Video.toLowerCase()
                                }

                            }
                        }
                         for (var i = 0; i < js.Contenido_Live.Escenas.length; i++) {
                            if (js.Contenido_Live.Escenas[i].Id_Escena.localeCompare('') == 0 ) {
                                
                            js.Contenido_Live.Escenas[i].Id_Escena=Math.round($.now() * Math.random() / 100000);
                            }
                        }
                        
                    return js;
                


            };
            var rename_file = function() {
                var header = document.getElementById('editor');
                var rs = header.getElementsByClassName('row');
                for (var i = 0; i < rs.length; i++) {
                    var inputs = rs[i].getElementsByTagName('input');
                    for (var j = 0; j < inputs.length; j++) {
                        if (inputs[j].type.localeCompare("file") == 0) {

                            inputs[j].name = 'archivos';
                        }
                    }
                }

            };
            // Start the schema and output textareas with initial values
            $output.value = '';


            // When the 'update form' button is clicked, set the editor's value
            $set_value_button.addEventListener('click', function() {
                jsoneditor.setValue(JSON.parse($output.value));
            });



            // Set the theme by loading the right stylesheets

            JSONEditor.defaults.options.theme = 'bootstrap3';
            JSONEditor.defaults.options.iconlib = 'bootstrap3';


            // Get starting value from url
            if (window.location.href.match('[?&]value=([^&]+)')) {
                window.startval = JSON.parse(LZString.decompressFromBase64(window.location.href.match('[?&]value=([^&]+)')[1]));
            }

            JSONEditor.defaults.options.object_layout = 'normal';
            // Specify upload handler
            JSONEditor.defaults.options.upload = function(type, file, cbs) {
                if (type === 'root.upload_fail') cbs.failure('Upload failed');
                else {
                    var tick = 0;
                    var tickFunction = function() {
                        tick += 20;
                        console.log('progress: ' + tick);

                        if (tick < 100) {
                            cbs.updateProgress(tick);
                            window.setTimeout(tickFunction, 50)
                        } else if (tick == 60) {
                            cbs.updateProgress();
                            window.setTimeout(tickFunction, 500)
                        } else {
                            cbs.success(file.name);
                        }
                    };

                    window.setTimeout(tickFunction)
                }
            };
            JSONEditor.defaults.options.form_name_root = false;
            JSONEditor.defaults.options.show_errors = 'interaction';
            JSONEditor.defaults.options['disable_edit_json'] = true;
            JSONEditor.defaults.options['disable_properties'] = true;
            JSONEditor.defaults.options['disable_array_delete_last_row'] = true;
            reload();
            rename();
            var $set_schema_button = document.getElementById('enviar');
            var $set_schema_button_cancelar = document.getElementById('cancelar');
            $set_schema_button.addEventListener('click', function() {
                rename();
                var headerw = document.subir.Titulo;


                rename_file();
                try {
                    var $schema2 = document.getElementById('output2');
                    var $schema = document.getElementById('output');
                    var id = document.subir.ID.value;
                    var $IDescena = document.getElementById('IDescena');
                    $IDescena.value = id;
                    $schema2.value = $schema.value;
                } catch (e) {
                    alert('Invalid Schema: ' + e.message);
                    return;
                }
                if (headerw.value.localeCompare("") != 0) {

                    $('#enviar').attr("disabled", true);

                    veificaNull()

                } else {

                    alert("Titulo esta vacio")
                }
            });
            $set_schema_button_cancelar.addEventListener('click', function() {

                location.href = 'contenidos_subidos'
            });
        })();
    </script>
</body>

</html>